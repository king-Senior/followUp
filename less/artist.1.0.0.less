
/**
 * author  作者       name:tanwu
 *
 * date    创建时间   time:2017-10-10
 *
 * version © 1.0.0
 *
 * 这只是一个实验
 *
 **/

 @charset "UTF-8";

/**
 *   大小及颜色的缩写
 *
 **/
 .whc(size-c,@w:auto,@h:auto,@c:transparent) {

     width:@w;
     height:@h;
     background: @c;

 }

/**
 *   弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。
 *
 *   元素展示了弹性子元素在一行内显示，从左到右:
 *
 **/
 .display(flex) {

     display:-webkit-flex;
     display: flex;
 }


/**
 *   flex 属性用于指定弹性子元素如何分配空间。
 *
 *   @vlue 分配的值，百分比分配
 *
 **/
 .flex(@vlue:1) {

     -webkit-flex:@vlue;
     flex:@vlue;

 }
 .flex-basis(@value) {

    -webkit-flex-basis:@value;
    flex-basis: @value;

 }
/**
 *   内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。
 *
 *   弹性项目向行头紧挨着填充。这个是默认值。
 *
 *   第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。
 *
 *   需要 .display();
 *
 **/
.display(j-start) {

     .display(flex);
     -webkit-justify-content:flex-start;
     justify-content:flex-start;

}

/**
 *   内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。
 *
 *   弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，
 *
 *   而后续弹性项依次平齐摆放。
 *
 *   需要 .display();
 *
 **/
 .display(j-end) {

     .display(flex);
     -webkit-justify-content:flex-end;
     justify-content:flex-end;

 }

/**
 *   内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。
 *
 *   弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。
 *
 *   需要 .display();
 *
 **/
 .display(j-center) {

     .display(flex);
     -webkit-justify-content:center;
     justify-content:center;

 }
.display(j-cen) {
  -webkit-justify-content:center;
  justify-content:center;
}


/**
 *   内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。
 *
 *   弹性项目平均分布在该行上。
 *
 *   如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。
 *
 *   否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，
 *
 *   然后剩余的弹性项分布在该行上，相邻项目的间隔相等。 (两端对齐)
 *
 *   需要 .display();
 *
 **/
 .display(j-between) {

     .display(auto);
     -webkit-justify-content: space-between;
     justify-content:space-between;

 }

.display(j-bet) {

  -webkit-justify-content: space-between;
  justify-content:space-between;

}

/*
 *   内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。
 *
 *   弹性项目平均分布在该行上，两边留有一半的间隔空间。
 *
 *   如果剩余空间为负或者只有一个弹性项，则该值等同于center。
 *
 *   否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），
 *
 *   同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。(两端分页居中对齐)
 *
 *   需要 .display();
 *
 */
 .display(j-around) {

     .display(flex);
     -webkit-justify-content:space-around;
     justify-content:space-around;

 }

.display(j-aro) {

  -webkit-justify-content:space-around;
  justify-content:space-around;

}


/**
 *   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
 *
 *   弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
 *
 *   需要 .display();
 *
 **/
 .display(ite-start) {

     .display(flex);
     -webkit-align-items:flex-start;
     align-items:flex-start;

 }

/**
 *   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
 *
 *   弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
 *
 *   需要 .display();
 *
 **/
 .display(ite-end) {

     .display(flex);
     -webkit-align-items:flex-end;
     align-items:flex-end;

 }


/**
 *   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
 *
 *   弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
 *
 *   需要 .display();
 *
 **/
 .display(ite-center) {

     .display(flex);
     -webkit-align-items:center;
     align-items:center;

 }
.display(ite-cen) {
  -webkit-align-items:center;
  align-items:center;
}


/**
 *   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
 *
 *   如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。（去除默认高度）
 *
 *   需要 .display();
 *
 **/
 .display(ite-base) {

     .display(flex);
     -webkit-align-items: baseline;
     align-items: baseline;

 }


/**
 *   align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
 *
 *   如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。
 *
 *   需要 .display();
 *
 **/
 .display(ite-stretch ) {

     .display(flex);
     -webkit-align-items: stretch ;
     align-items: stretch ;

 }



/**
 *   flex-direction 顺序指定了弹性子元素在父容器中的位置。
 *
 *   纵向排列。
 *
 *   需要 .display();
 *
 **/
 .display(column){

     .display(flex);
     flex-direction: column;
     -webkit-flex-direction: column;

 }

/**
 *   flex-direction 顺序指定了弹性子元素在父容器中的位置。
 *
 *   纵向剧居中。
 *
 *
 **/

 .display(col-center) {

   -webkit-align-items: center;
   align-items: center;

 }



/**
 *   flex-direction 顺序指定了弹性子元素在父容器中的位置。
 *
 *   反转纵向排列，从后往前排，最后一项排在最上面。
 *
 *   需要 .display();
 *
 **/
 .display(column-reverse){

     .display(flex);
     flex-direction: column-reverse;
     -webkit-flex-direction: column-reverse;

 }


/**
 *   flex-direction 顺序指定了弹性子元素在父容器中的位置。
 *
 *   横向从左到右排列（左对齐），默认的排列方式。
 *
 *   需要 .display();
 *
 **/
 .display(row){

     .display(flex);
     flex-direction: row;
     -webkit-flex-direction: row;

 }


/**
 *   flex-direction 顺序指定了弹性子元素在父容器中的位置。
 *
 *   反转横向排列（右对齐，从后往前排，最后一项排在最前面。
 *
 *   需要 .display();
 *
 **/
 .display(row-reverse){

     .display(flex);
     flex-direction: row-reverse;
     -webkit-flex-direction: row-reverse;

 }


/**
 *   flex-wrap 属性用于指定弹性盒子的子元素换行方式。
 *
 *   弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行
 *
 *   需要 .display();
 *
 **/
 .display(nowrap) {

     .display(flex);
     -webkit-flex-wrap: nowrap ;
     flex-wrap: nowrap ;

 }


/**
 *   flex-wrap 属性用于指定弹性盒子的子元素换行方式。
 *
 *   弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行
 *
 *   需要 .display();
 *
 **/
 .display(flex-wrap) {

     .display(flex);
     -webkit-flex-wrap: wrap;
     flex-wrap: wrap;

 }

/**
 *   flex-wrap 属性用于指定弹性盒子的子元素换行方式。
 *
 *   反转 wrap 排列。
 *
 *   需要 .display();
 *
 **/
 .display(flex-wrap-reverse) {

     .display(flex);
     -webkit-wrap-reverse: wrap-reverse;
     wrap-reverse: wrap-reverse;

 }
.display(flex-wrap){
  -webkit-wrap-reverse: wrap;
  wrap-reverse: wrap;

}


/**
 *   弹性子元素属性
 *
 *   用整数值来定义排列顺序，数值小的排在前面。可以为负值。
 *
 **/
 .display(order,@ord:0) {

     .display(flex);
     -webkit-order: @ord;
     order: @ord;

 }


/**
 *   完美居中
 *
 *   当子元素无尺寸时，可水平、垂直居中。
 *
 *   需要 .display();
 *
 **/
 .display(auto) {

     .display(flex);
     -webkit-justify-content:center;
     justify-content:center;
     -webkit-align-items:center;
     align-items:center;

 }


/**
 *   字体
 *
 *   @s  字体大小
 *
 *   @c    字体颜色
 *
 *   @fal  字体对齐方法，（默认左对齐）
 *
 *   @fal  字体加粗，（默认无0
 *
 *   @f    字体样式（默认微软雅黑）
 *
 *   需要 .display();
 *
 **/
 .font(@s,@c,@fal:left,@fw:normal,@f:'微软雅黑'){

     font-size:@s;
     color: @c;
     font-family:@f;
     font-weight:@fw;
     text-align: @fal;

 }

/**
 *   圆角
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(@r){

     -webkit-border-radius: @r;
     -moz-border-radius: @r;
     border-radius: @r;

 }


/**
 *   圆角--左上角
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(left-top,@r){

     -webkit-border-top-left-radius: @r;
     -moz-border-top-left-radius: @r;
     border-top-left-radius: @r;

 }


/**
 *   圆角--左下角
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(left-buttom,@r){

     -webkit-border-bottom-left-radius: @r;
     -moz-border-bottom-left-radius: @r;
     border-bottom-left-radius: @r;

 }


/**
 *   圆角--右下角
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(right-buttom,@r){

     -webkit-border-bottom-right-radius: @r;
     -moz-border-bottom-right-radius: @r;
     border-bottom-right-radius: @r;

 }


/**
 *   圆角--右上角
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(right-top,@r){

    -webkit-border-top-right-radius: @r;
    -moz-border-top-right-radius: @r;
    border-top-right-radius: @r;

 }

/**
 *   圆角--上
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(top,@r){

     .radius(left-top,@r);
     .radius(right-top,@r);

 }

/**
 *   圆角--下
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(buttom,@r){

     .radius(left-buttom,@r);
     .radius(right-buttom,@r);

 }

/**
 *   圆角--左
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(left,@r){

     .radius(left-top,@r);
     .radius(left-buttom,@r);

 }

/**
 *   圆角--右
 *
 *   @r 贺角弧度大小
 *
 **/
 .radius(right,@r){

     .radius(right-top,@r);
     .radius(right-buttom,@r);

 }


/**
 *   box-sizing 属性允许你以某种方式定义某些元素，以适应指定区域。
 *
 *   @p    内填充大小
 *
 *   @pd   box-sizing值 （默认border-box）
 *
 **/
 .padd-box(@p,@pd:border-box) {

     padding:@p;
     -webkit-box-sizing: @pd;
     -moz-box-sizing: @pd;
     box-sizing: @pd;

 }

/**
 *   去除bottom默认样式
 *
 *   @b border  默认none
 *
 *   @b 轮廓  默认none
 *
 **/
 .remove-btn(@b:none,@o:none) {

     border:@b;
     cursor: pointer;
     outline:@o;
     &:focus {

      outline:@o;

     }

 }

/**
 *   阴影
 *
 *   @shadow 值
 *
 **/
 .box(shadow,@shadow) {

    -webkit-box-shadow:@shadow;
    -moz-box-shadow:@shadow;
    -o-box-shadow: @shadow;
    box-shadow:@shadow;

 }

/**
 *   表格
 *
 *   边框设置不重叠
 *
 **/
 .table-init() {

    border-collapse: collapse;
    border-spacing: 0;
    margin: 0;
    padding: 0;
    border: 0;

 }


/**
 *   背景渐变
 *
 *   线性渐变 - 从上到下（默认情况下）
 *
 **/
 .color-gradual(up,@sta,@end) {

   background:-webkit-linear-gradient(@sta,@end);
   background:-moz-linear-gradient(@sta,@end);
   background:-o-linear-gradient(@sta,@end);
   background:linear-gradient(@sta,@end);

 }

/**
 *   文本渐变
 *
 *   需要和 color-gradual 一起使用
 *
 **/
 .color-gradual-text() {

   -webkit-background-clip:text;
   -webkit-text-fill-color:transparent;
   text-fill-color:transparent;
 }



/**
 *   阴影
 *
 *
 *
 **/
 .shadow(box,@value) {

   -webkit-box-shadow:@value;
           box-shadow:@value;

 }

 .shadow(text,@value) {

  -webkit-text-shadow:@value;
  text-shadow:@value;

 }

/** 边框 (全部) **/
 .border(all,@value) {  border:@value;  }

/** (上边框) **/
 .border(top,@vlue) { border-top:@vlue; }

/** (下边框) **/
 .border(bottom,@vlue) { border-bottom:@vlue; }

/** (左边框) **/
 .border(left,@vlue) { border-left:@vlue; }

/** (右边框) **/
 .border(right,@vlue) { border-right:@vlue; }

/** (上下边框) **/
 .border(top-bottom,@vlue) { border-bottom:@vlue;border-top: @vlue }

/**  (左右边框) **/
 .border(left-right,@vlue) { border-left:@vlue;border-right: @vlue }









